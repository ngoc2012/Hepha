import { type RequestStore } from 'next/dist/client/components/request-async-storage.external';
import type { CacheScope } from 'next/dist/server/after/react-cache-scope';
import type { RequestLifecycleOpts } from 'next/dist/server/base-server';
import type { AfterTask } from 'next/dist/server/after/after';
export interface AfterContext {
    run<T>(requestStore: RequestStore, callback: () => T): T;
    after(task: AfterTask): void;
}
export type AfterContextOpts = {
    waitUntil: RequestLifecycleOpts['waitUntil'] | undefined;
    onClose: RequestLifecycleOpts['onClose'] | undefined;
    cacheScope: CacheScope | undefined;
};
export declare function createAfterContext(opts: AfterContextOpts): AfterContext;
export declare class AfterContextImpl implements AfterContext {
    private waitUntil;
    private onClose;
    private cacheScope;
    private requestStore;
    private runCallbacksOnClosePromise;
    private callbackQueue;
    constructor({ waitUntil, onClose, cacheScope }: AfterContextOpts);
    run<T>(requestStore: RequestStore, callback: () => T): T;
    after(task: AfterTask): void;
    private addCallback;
    private runCallbacksOnClose;
    private runCallbacks;
}
